faaast-service:
  messageBus:
    host: "wss://<path:factory-x-ci-cd/data/async-aas#broker-url>:443/mqtt"
    user: "<path:factory-x-ci-cd/data/async-aas#broker-user>"
    password: "<path:factory-x-ci-cd/data/async-aas#broker-pw>"
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-body-size: 150m
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    tls:
      - hosts:
          - "<path:factory-x-ci-cd/data/async-aas#faaast-url>"
        secretName: "tls-secret-faaast-service"
    hosts:
      - host: "<path:factory-x-ci-cd/data/async-aas#faaast-url>"
        paths:
          - path: /
            pathType: Prefix

  seeding:
    enabled: true
    filename: "<path:factory-x-ci-cd/data/async-aas#initial-aas-file-name>"
    github:
      repository: "<path:factory-x-ci-cd/data/async-aas#initial-aas-file-location>"
      personalAccessToken: "<path:factory-x-ci-cd/data/async-aas#initial-aas-github-token>"

  basicAuth:
    user: "<path:factory-x-ci-cd/data/async-aas#faaast-basic-auth-user>"
    htPassword: "<path:factory-x-ci-cd/data/async-aas#faaast-basic-auth-pw-hash>"

aas-basyx-v2-full:
  mqtt:
    enabled: false

  keycloak:
    enabled: true
    postgresql:
      enabled: true
      auth:
        username: <path:factory-x-ci-cd/data/async-aas#kc-pg-user>
        password: <path:factory-x-ci-cd/data/async-aas#kc-pg-pw>
        database: <path:factory-x-ci-cd/data/async-aas#kc-pg-db>
    ingress:
      enabled: true
      ingressClassName: "nginx"
      hostname: <path:factory-x-ci-cd/data/async-aas#keycloak-url>
      tls: true
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/enable-cors: 'true'
    auth:
      adminUser: <path:factory-x-ci-cd/data/async-aas#keycloak-user>
      adminPassword: <path:factory-x-ci-cd/data/async-aas#keycloak-pw>
    args: ["/bin/sh -c 'kc.sh import --file /opt/keycloak/data/import/BaSyx-realm.json; kc.sh start-dev --hostname-strict=false --proxy-headers=xforwarded --http-enabled=true --features=token-exchange'"]

  aas-registry:
    enabled: true
    image:
      # If Kafka is used, then the appropriate Bootstrap connection string must be provided.
      name: eclipsebasyx/aas-registry-log-mem:2.0.0-SNAPSHOT
      pullPolicy: IfNotPresent
    service:
      port: 8080
    # Keep it null if not deploying a Kafka instance.
    kafka:
      connectionString: null
    ingress:
      enabled: true
      host: "<path:factory-x-ci-cd/data/async-aas#basyx-reg-url>"
      tls: true
      ingressClassName: "nginx"
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    config: |-
      basyx.cors.allowed-origins=*
      basyx.cors.allowed-methods=GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD


  sm-registry:
    enabled: false

  aas-discovery:
    enabled: true
    image:
      name: eclipsebasyx/aas-discovery:2.0.0-SNAPSHOT
      pullPolicy: IfNotPresent
    service:
      port: 8081
    config: |-
      server.port=8081
      spring.application.name=AAS Discovery Service
      logging.level.root=TRACE

      basyx.aasdiscoveryservice.name=aas-discovery-service

      basyx.backend=InMemory

      basyx.cors.allowed-origins=*
      basyx.cors.allowed-methods=GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD

      basyx.feature.authorization.enabled=true
      basyx.feature.authorization.type=rbac
      basyx.feature.authorization.jwtBearerTokenProvider=keycloak
      basyx.feature.authorization.rbac.file=file:/application/rbac-rules.json
      spring.security.oauth2.resourceserver.jwt.issuer-uri=https://<path:factory-x-ci-cd/data/async-aas#keycloak-url>/realms/BaSyx
    ingress:
      enabled: true
      host: "<path:factory-x-ci-cd/data/async-aas#basyx-disco-url>"
      tls: true
      ingressClassName: "nginx"
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"

  # Also needs an ingress.
  aas-environment:
    enabled: true
    image:
      name: eclipsebasyx/aas-environment:2.0.0-SNAPSHOT
      pullPolicy: Always
    service:
      port: 8081
    config: |-
      server.port=8081

      basyx.backend = InMemory

      #basyx.environment=file:aas

      logging.level.root=DEBUG

      basyx.cors.allowed-origins=*
      basyx.cors.allowed-methods=GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
      basyx.aasrepository.feature.registryintegration=https://<path:factory-x-ci-cd/data/async-aas#basyx-reg-url>
      basyx.externalurl=https://<path:factory-x-ci-cd/data/async-aas#basyx-env-url>
      spring.servlet.multipart.max-file-size=128MB
      spring.servlet.multipart.max-request-size=128MB

      basyx.aasrepository.feature.mqtt.enabled = true
      basyx.submodelrepository.feature.mqtt.enabled = true
      mqtt.clientId=basyx
      mqtt.hostname=<path:factory-x-ci-cd/data/async-aas#broker-url>
      mqtt.protocol=wss
      mqtt.port=443
      mqtt.username=<path:factory-x-ci-cd/data/async-aas#broker-user>
      mqtt.password=<path:factory-x-ci-cd/data/async-aas#broker-pw>
      
      basyx.feature.authorization.enabled = true
      basyx.feature.authorization.type = rbac
      basyx.feature.authorization.jwtBearerTokenProvider = keycloak
      basyx.feature.authorization.rbac.file = file:/application/rbac-rules.json

      spring.security.oauth2.resourceserver.jwt.issuer-uri = https://<path:factory-x-ci-cd/data/async-aas#keycloak-url>/realms/BaSyx

    ingress:
      enabled: true
      host: <path:factory-x-ci-cd/data/async-aas#basyx-env-url>
      tls: true
      ingressClassName: "nginx"
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/enable-cors: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-body-size: 150m
    rbac:
      rules: |
        [
          {
            "role": "admin",
            "action": ["CREATE", "READ", "UPDATE", "DELETE" ],
            "targetInformation": {
              "@type": "concept-description",
              "conceptDescriptionIds": "*"
            }
          },
          {
            "role": "admin",
            "action": [ "CREATE", "READ", "UPDATE", "DELETE" ],
            "targetInformation": {
              "@type": "aas",
              "aasIds": "*"
            }
          },
          {
            "role": "admin",
            "action": [ "CREATE", "READ", "UPDATE", "DELETE", "EXECUTE" ],
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "*",
              "submodelElementIdShortPaths": "*"
            }
          },
          {
            "role": "admin",
            "action": [ "CREATE", "READ", "UPDATE", "DELETE" ],
            "targetInformation": {
              "@type": "aas-environment",
              "aasIds": "*",
              "submodelIds": "*"
            }
          },
          {
            "role": "basyx-reader",
            "action": "READ",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "*",
              "submodelElementIdShortPaths": "*"
            }
          },
          {
            "role": "basyx-reader-two",
            "action": "READ",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId",
              "submodelElementIdShortPaths": "*"
            }
          },
          {
            "role": "basyx-sme-reader",
            "action": "READ",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": [
                "specificSubmodelId",
                "testSMId1",
                "testSMId2"
              ],
              "submodelElementIdShortPaths": [
                "testSMEIdShortPath1",
                "smc2.specificSubmodelElementIdShort",
                "testSMEIdShortPath2"
              ]
            }
          },
          {
            "role": "basyx-sme-reader-two",
            "action": "READ",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId",
              "submodelElementIdShortPaths": "smc2.specificFileSubmodelElementIdShort"
            }
          },
          {
            "role": "basyx-updater",
            "action": "UPDATE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "*",
              "submodelElementIdShortPaths": "*"
            }
          },
          {
            "role": "basyx-updater-two",
            "action": "UPDATE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId",
              "submodelElementIdShortPaths": "*"
            }
          },
          {
            "role": "basyx-sme-updater",
            "action": "UPDATE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId",
              "submodelElementIdShortPaths": "smc2.specificFileSubmodelElementIdShort"
            }
          },
          {
            "role": "basyx-sme-updater-two",
            "action": "UPDATE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId",
              "submodelElementIdShortPaths": "smc2"
            }
          },
          {
            "role": "basyx-sme-updater-three",
            "action": "UPDATE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId-2",
              "submodelElementIdShortPaths": "smc1.specificSubmodelElementIdShort-2"
            }
          },
          {
            "role": "basyx-file-sme-updater",
            "action": "UPDATE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId-2",
              "submodelElementIdShortPaths": "smc2.specificFileSubmodelElementIdShort"
            }
          },
          {
            "role": "basyx-deleter",
            "action": "DELETE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "*",
              "submodelElementIdShortPaths": "*"
            }
          },
          {
            "role": "basyx-deleter-two",
            "action": "DELETE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId-2",
              "submodelElementIdShortPaths": "*"
            }
          },
          {
            "role": "basyx-executor",
            "action": "EXECUTE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "*",
              "submodelElementIdShortPaths": "*"
            }
          },
          {
            "role": "basyx-executor-two",
            "action": "EXECUTE",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId",
              "submodelElementIdShortPaths": "square"
            }
          },
          {
            "role": "basyx-file-sme-reader",
            "action": "READ",
            "targetInformation": {
              "@type": "submodel",
              "submodelIds": "specificSubmodelId-2",
              "submodelElementIdShortPaths": "smc2.specificFileSubmodelElementIdShort"
            }
          }
        ]
  # Needs specific ingress.
  aas-web-ui:
    enabled: false

rabbitmq:
  image:
    debug: false

  extraContainerPorts:
  - name: websocket-mqtt
    containerPort: 9001

  # select exposed ports
  service:
    portEnabled: false  # AMQP
    distPortEnabled: false  # Erlang distribution server
    managerPortEnabled: false  # RabbitMQ Manager
    epmdPortEnabled: false  # RabbitMQ EPMD Discovery service
    extraPorts:
      - name: websocket-mqtt
        port: 9001
        targetPort: 9001

  # disable persistence features using PVC
  persistence:
    enabled: false

  # RabbitMQ / MQTT User
  auth:
    username: "<path:factory-x-ci-cd/data/async-aas#broker-user>"
    password: "<path:factory-x-ci-cd/data/async-aas#broker-pw>"
    updatePassword: true

  # Enable MQTT + Websockets
  extraPlugins: "rabbitmq_mqtt rabbitmq_web_mqtt"

  # Additional RabbitMQ configuration
  extraConfiguration: |-
    vm_memory_high_watermark.relative = 0.8

    web_mqtt.tcp.port = 9001
    web_mqtt.ws_path = /mqtt  # this MUST be set for Basyx (paho default, non-configurable in basyx)

    mqtt.vhost = /
    mqtt.exchange = amq.topic
    mqtt.allow_anonymous = false

    #log.default.level = debug

  ingress:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/websocket-services: rabbitmqttbroker-websockets-service
    
    hostname: ""  # only for management interface, "disable"

    extraRules:
      - host: <path:factory-x-ci-cd/data/async-aas#broker-url>
        http:
          paths:
            - path: /mqtt
              pathType: ImplementationSpecific
              backend:
                service:
                  name: rabbitmqttbroker-websockets-service  # TODO verify whether this just works or if we need to use "fullnameOverride"
                  port: 9001

    # need to use extraTls because the regular "tls" block is only for management interface
    extraTls:
      - hosts:
        - <path:factory-x-ci-cd/data/async-aas#broker-url>
        secretName: chart-example-tls  # TODO taken from basyx-mqtt config, does this need a CI variable?
